/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { BankAccount, BankAccountInterface } from "../BankAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061064c806100206000396000f3fe6080604052600436106100345760003560e01c80633ccfd60b1461003957806370a0823114610050578063d0e30db01461008d575b600080fd5b34801561004557600080fd5b5061004e610097565b005b34801561005c57600080fd5b5061007760048036038101906100729190610391565b6101cb565b60405161008491906103d7565b60405180910390f35b6100956101e3565b005b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610118576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010f9061044f565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610184813373ffffffffffffffffffffffffffffffffffffffff1661023a90919063ffffffff16565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006020528060005260406000206000915090505481565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610231919061049e565b92505081905550565b8047101561027d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102749061051e565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516102a39061056f565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b5050905080610329576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610320906105f6565b60405180910390fd5b505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061035e82610333565b9050919050565b61036e81610353565b811461037957600080fd5b50565b60008135905061038b81610365565b92915050565b6000602082840312156103a7576103a661032e565b5b60006103b58482850161037c565b91505092915050565b6000819050919050565b6103d1816103be565b82525050565b60006020820190506103ec60008301846103c8565b92915050565b600082825260208201905092915050565b7f50617320646520666f6e64206120726574697265720000000000000000000000600082015250565b60006104396015836103f2565b915061044482610403565b602082019050919050565b600060208201905081810360008301526104688161042c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104a9826103be565b91506104b4836103be565b92508282019050808211156104cc576104cb61046f565b5b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000610508601d836103f2565b9150610513826104d2565b602082019050919050565b60006020820190508181036000830152610537816104fb565b9050919050565b600081905092915050565b50565b600061055960008361053e565b915061056482610549565b600082019050919050565b600061057a8261054c565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b60006105e0603a836103f2565b91506105eb82610584565b604082019050919050565b6000602082019050818103600083015261060f816105d3565b905091905056fea2646970667358221220373f892bf5b1f9a0a9b6e24d49e9c0f5d7f317d524967064f7527fb50e558b6964736f6c63430008120033";

type BankAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BankAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BankAccount__factory extends ContractFactory {
  constructor(...args: BankAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BankAccount> {
    return super.deploy(overrides || {}) as Promise<BankAccount>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BankAccount {
    return super.attach(address) as BankAccount;
  }
  override connect(signer: Signer): BankAccount__factory {
    return super.connect(signer) as BankAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BankAccountInterface {
    return new utils.Interface(_abi) as BankAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BankAccount {
    return new Contract(address, _abi, signerOrProvider) as BankAccount;
  }
}
