/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Attack,
  AttackInterface,
} from "../../../contracts/Attack.sol/Attack";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_bankAccountSmartContractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "bankAccountSmartContractAddress",
    outputs: [
      {
        internalType: "contract InterfaceBankAccount",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610b7a380380610b7a833981810160405281019061003291906101b7565b61004e61004361008860201b60201c565b61009060201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506101e4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061018482610159565b9050919050565b61019481610179565b811461019f57600080fd5b50565b6000815190506101b18161018b565b92915050565b6000602082840312156101cd576101cc610154565b5b60006101db848285016101a2565b91505092915050565b608051610961610219600039600081816057015281816095015281816103100152818161035001526103d101526109616000f3fe60806040526004361061004e5760003560e01c8063550b311d146101ac578063715018a6146101d75780638da5cb5b146101ee5780639e5faafc14610219578063f2fde38b14610223576101a7565b366101a75760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16311115610118577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100fb57600080fd5b505af115801561010f573d6000803e3d6000fd5b505050506101a5565b6101566040518060400160405280601481526020017f5472616e73666572696e67206d6f6e65792e2e2e00000000000000000000000081525061024c565b61015e6102e5565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156101a3573d6000803e3d6000fd5b505b005b600080fd5b3480156101b857600080fd5b506101c161030e565b6040516101ce91906106c6565b60405180910390f35b3480156101e357600080fd5b506101ec610332565b005b3480156101fa57600080fd5b506102036102e5565b6040516102109190610702565b60405180910390f35b610221610346565b005b34801561022f57600080fd5b5061024a6004803603810190610245919061074e565b610451565b005b6102e281604051602401610260919061080b565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104d4565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b61033a6104fd565b610344600061057b565b565b61034e6104fd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103b657600080fd5b505af11580156103ca573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561043757600080fd5b505af115801561044b573d6000803e3d6000fd5b50505050565b6104596104fd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf9061089f565b60405180910390fd5b6104d18161057b565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b61050561063f565b73ffffffffffffffffffffffffffffffffffffffff166105236102e5565b73ffffffffffffffffffffffffffffffffffffffff1614610579576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105709061090b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061068c61068761068284610647565b610667565b610647565b9050919050565b600061069e82610671565b9050919050565b60006106b082610693565b9050919050565b6106c0816106a5565b82525050565b60006020820190506106db60008301846106b7565b92915050565b60006106ec82610647565b9050919050565b6106fc816106e1565b82525050565b600060208201905061071760008301846106f3565b92915050565b600080fd5b61072b816106e1565b811461073657600080fd5b50565b60008135905061074881610722565b92915050565b6000602082840312156107645761076361071d565b5b600061077284828501610739565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107b557808201518184015260208101905061079a565b60008484015250505050565b6000601f19601f8301169050919050565b60006107dd8261077b565b6107e78185610786565b93506107f7818560208601610797565b610800816107c1565b840191505092915050565b6000602082019050818103600083015261082581846107d2565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610889602683610786565b91506108948261082d565b604082019050919050565b600060208201905081810360008301526108b88161087c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006108f5602083610786565b9150610900826108bf565b602082019050919050565b60006020820190508181036000830152610924816108e8565b905091905056fea264697066735822122083d315589ed81253ba8d65cd59fe05cf66dd84e828e0447f1aaf6228cdbbe8c364736f6c63430008120033";

type AttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attack__factory extends ContractFactory {
  constructor(...args: AttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _bankAccountSmartContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Attack> {
    return super.deploy(
      _bankAccountSmartContractAddress,
      overrides || {}
    ) as Promise<Attack>;
  }
  override getDeployTransaction(
    _bankAccountSmartContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _bankAccountSmartContractAddress,
      overrides || {}
    );
  }
  override attach(address: string): Attack {
    return super.attach(address) as Attack;
  }
  override connect(signer: Signer): Attack__factory {
    return super.connect(signer) as Attack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackInterface {
    return new utils.Interface(_abi) as AttackInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Attack {
    return new Contract(address, _abi, signerOrProvider) as Attack;
  }
}
